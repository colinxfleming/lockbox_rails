class SupportRequest < ApplicationRecord
  belongs_to :lockbox_partner
  belongs_to :user
  has_one :lockbox_action
  accepts_nested_attributes_for :lockbox_action
  has_many :lockbox_transactions, through: :lockbox_action
  accepts_nested_attributes_for :lockbox_transactions, reject_if: :all_blank,
    allow_destroy: true
  has_many :notes, as: :notable

  validates :client_ref_id, presence: true
  validates :name_or_alias, presence: true
  validates :user, presence: true
  validates :lockbox_partner, presence: true

  after_create :notate_creation
  after_update :notate_change

  # Sometimes the UUID will already have been created elsewhere, and sometimes not
  before_validation :populate_client_ref_id

  # for grepability:
  # scope :pending
  # scope :completed
  # scope :canceled
  LockboxAction::STATUSES.each do |status|
    scope status, -> { joins(:lockbox_action).where("lockbox_actions.status": status) }
    scope "#{status}_for_partner", ->(lockbox_partner_id:) { joins(:lockbox_action).where(lockbox_partner_id: lockbox_partner_id, "lockbox_actions.status": status) }
  end

  # Not super comfortable overriding such a core method, but this was the best way
  # I could find to detect the changing of the amount. Otherwise you'd have to dig
  # into lockbox_action.lockbox_transactions, somehow figure out when creating a
  # transaction was because of a "support request edit" vs "support request create"
  #
  # Also not super comfortable that there are three places we're handling notes for
  # support request edits: here, 'notate_change' method below, and 'notate_change'
  # method on lockbox_action.
  #
  # -cd
  def update(params)
    original_amount = amount.to_s

    result = super(params)

    if result
      new_amount = amount.to_s
      if new_amount != original_amount
        timestamp = Time.now.strftime("%Y-%m-%d at %-I:%M%P")
        text = "The Total Amount for this Support Request was changed on #{timestamp} from $#{original_amount} to $#{new_amount}"
        notes.create(text: text)
      end
    end

    result
  end

  def all_support_requests_for_partner
    @all_support_requests_for_partner ||= self
      .class
      .where(lockbox_partner: lockbox_partner)
      .sort { |x, y| y.eff_date <=> x.eff_date }
  end

  def amount
    lockbox_action.try(:amount) || 0
  end

  def editable_status?
    lockbox_action.editable_status?
  end

  def eff_date
    lockbox_action.eff_date
  end
  alias_method :pickup_date, :eff_date

  def most_recent_note
    @most_recent_note ||= notes.last
  end

  def newer_request_by_partner
    return nil unless newer_idx
    all_support_requests_for_partner[newer_idx]
  end

  def older_request_by_partner
    return nil unless older_idx
    all_support_requests_for_partner[older_idx]
  end

  def status
    lockbox_action.status
  end

  def status_options
    LockboxAction::STATUSES - [status]
  end

  def notate_creation
    note_text =
      "Support request generated by #{user.name} " \
      "at #{created_at.strftime("%I:%M %p %:::z")} " \
      "on #{created_at.strftime("%B %d, %Y")}"
    notes.create(text: note_text)
  end

  def notate_change

    fields_of_interest = HashWithIndifferentAccess.new(
      client_ref_id: "Client Reference ID",
      name_or_alias: "Client Alias",
      urgency_flag: "Urgency Flag",
    )

    note_texts = []

    saved_changes.each do |field, values|
      field_label = fields_of_interest[field]
      next unless field_label

      timestamp = Time.now.strftime("%Y-%m-%d at %-I:%M%P")

      note_texts << "The #{field_label} for this Support Request was changed on #{timestamp} from #{values.first} to #{values.last}"
    end

    note_texts.each do |text|
      notes.create(text: text)
    end

    true
  end

  def send_status_update_alert(original_status:, user:)
    # This likely means the status update was submitted twice. To avoid
    # confusion, we shouldn't send the email in that case.
    return if original_status == status
    date = Date.current
    SupportRequestMailer
      .with(
        date: date,
        original_status: original_status,
        support_request: self,
        user: user
      )
      .status_update_alert
      .deliver_now
  end

  private

  def index_in_support_requests_collection
    all_support_requests_for_partner.find_index self
  end

  def newer_idx
    idx = index_in_support_requests_collection
    @newer_idx ||= idx > 0 ? idx - 1 : nil
  end

  def older_idx
    idx = index_in_support_requests_collection
    max_idx = all_support_requests_for_partner.count - 1
    @older_idx ||= idx < max_idx ? idx + 1 : nil
  end

  def populate_client_ref_id
    self.client_ref_id = SecureRandom.uuid if client_ref_id.blank?
  end
end
